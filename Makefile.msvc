# nmake -f Makefile.msvc

CC       = cl
CXX      = cl
MSVC_CRT =
MY_DEBUG = 
MSVC_CRT =
CFLAGS   = /nologo /W3 /WX /Gd /fp:precise /D "_UNICODE" /D "UNICODE" \
           /D "_CRT_SECURE_NO_WARNINGS" /D "CJSON_HIDE_SYMBOLS"
LDFLAGS  = /NOLOGO
       
!if "$(CC)"=="clang-cl"
LD       = lld-link.exe /DLL
RC       = llvm-rc.exe
GEN_LIB  = llvm-dlltool.exe
!ELSEIF "$(CC)"=="cl"
LD       = link.exe /DLL
RC       = rc.exe
GEN_LIB  = lib.exe
!else
!ERROR Unsupported platforms!
!endif

MAKE	   = nmake
LIBPORTABLE_STATIC =

!if "$(APP_DEBUG)"=="1"
CFLAGS   = $(CFLAGS) /O2 /Zi /Fd$(DISTDIR)\portable$(BITS).pdb /D "DEBUG" /D "_LOGDEBUG"
LDFLAGS  = $(LDFLAGS) /DEBUG
!elseif "$(CC)"=="cl"
CFLAGS   = $(CFLAGS) /O2 /GL /Gd /D "NDEBUG"
LDFLAGS  = $(LDFLAGS) /LTCG
!else
CFLAGS   = $(CFLAGS) /O2 /D "NDEBUG" -flto=thin
!endif

!if "$(MSVC_CRT)"=="1"
CFLAGS   = $(CFLAGS) /MD /GS- /GR- /utf-8 /D "USE_UTF8"
!else
CFLAGS   = $(CFLAGS) /MD /GS- /GR- /utf-8 /D "USE_UTF8" /D "VC12_CRT"
!endif

!if "$(PLATFORM)"=="X64" || "$(TARGET_CPU)"=="x64" || "$(VSCMD_ARG_HOST_ARCH)"=="x64"
PLATFORM = x64
BITS	 = 64
CFLAGS   = $(CFLAGS) /D "WIN64" /D "_WIN64"
GEN_FLAGS = -m i386:x86-64
!else
PLATFORM = x86
BITS	 = 32
CFLAGS   = $(CFLAGS) /D "WIN32" /D "_WIN32"
GEN_FLAGS = -m i386
!if "$(CC)"=="clang-cl"
CFLAGS   = $(CFLAGS) --target=i686-pc-windows-msvc
!endif
!endif

!if "$(CC)"=="clang-cl"
CFLAGS   = $(CFLAGS) -Wno-unused-function
!endif

MD       = @mkdir
CP       = copy /y
RM       = @del /q
RMDIR    = @rmdir /s /q
SRC      = src
SUB_DIR  = $(SRC)\minhook
SUBMK    =\
	@cd $(SUB_DIR) && $(MAKE) -f Makefile.msvc

DEP      = .dep
RCFLAGS  = /nologo /D "_UNICODE" /D "UNICODE"
MIN_INC  = $(SRC)\minhook\include

OBJDLL   = $(DEP)\portable.obj $(DEP)\general.obj $(DEP)\ice_error.obj $(DEP)\bosskey.obj $(DEP)\inject.obj \
           $(DEP)\safe_ex.obj  $(DEP)\new_process.obj $(DEP)\cpu_avx.obj $(DEP)\cpu_avx512.obj $(DEP)\cpu_info.obj \
           $(DEP)\balance.obj $(DEP)\win_registry.obj $(DEP)\set_env.obj $(DEP)\on_tabs.obj \
           $(DEP)\lz4.obj $(DEP)\cjson.obj $(DEP)\json_paser.obj $(DEP)\ini_parser.obj

!if "$(DLL_INJECT)" == "1"
CFLAGS   = $(CFLAGS) /D "DLL_INJECT"
!endif

CFLAGS   = $(CFLAGS) /I$(MIN_INC)

!if "$(LIBPORTABLE_STATIC)"=="1"
LD       = llvm-lib.exe
OUT	 = $(DISTDIR)\portable$(BITS)_s.lib
TETE	 = $(DISTDIR)\tmemutil_s.lib
CFLAGS   = $(CFLAGS) /D "LIBPORTABLE_STATIC"
CRTFLAGS =
OBJS     = $(DEP)\*.obj
!else
CFLAGS   = $(CFLAGS) /D "LIBPORTABLE_EXPORTS"
!if "$(MSVC_CRT)">="1"
OBJDLL   = $(OBJDLL) $(DEP)\msvcrt-light-$(PLATFORM).lib $(DEP)\ntdll-$(PLATFORM).lib
LDFLAGS  =  $(LDFLAGS) /opt:ref /opt:icf /MACHINE:$(PLATFORM) /NODEFAULTLIB
!else
LDFLAGS  =  $(LDFLAGS) /opt:ref /opt:icf /ignore:4078 /MACHINE:$(PLATFORM) /DEFAULTLIB:MSVCRT
!endif
CRTFLAGS = $(OUT1) kernel32.lib shell32.lib shlwapi.lib user32.lib ole32.lib $(CRTFLAGS)
OUT	 = $(DISTDIR)\portable$(BITS).dll
TETE	 = $(DISTDIR)\tmemutil.dll
OBJDLL   = $(OBJDLL)  $(DEP)\resource.res
OBJS     = $(OBJDLL)
!endif

DISTDIR	 = Release
OUT1	 = $(DISTDIR)\minhook$(BITS).lib

all                     : dirs $(OUT1) $(OUT)

$(OUT1)			        : $(SUB_DIR)/Makefile.msvc
	$(SUBMK)

$(OUT)			        : $(OBJDLL)
	$(LD) /OUT:"$@" $(OBJS) $(LDFLAGS) $(MIN_LIB) $(CRTFLAGS)
	-$(CP) $(OUT) $(TETE) 2>&1>NUL

$(DEP)\portable.obj     : $(SRC)\portable.c $(SRC)\portable.h
	$(CC) $(CFLAGS) /c $(SRC)\portable.c /Fo$@
$(DEP)\general.obj      : $(SRC)\general.c $(SRC)\general.h
	$(CC) $(CFLAGS) /c $(SRC)\general.c /Fo$@
$(DEP)\inject.obj       : $(SRC)\inject.c $(SRC)\inject.h $(SRC)\winapis.h
	$(CC) $(CFLAGS) /c $(SRC)\inject.c /Fo$@
$(DEP)\safe_ex.obj      : $(SRC)\safe_ex.c $(SRC)\safe_ex.h $(SRC)\winapis.h
	$(CC) $(CFLAGS) /c $(SRC)\safe_ex.c /Fo$@
$(DEP)\ice_error.obj    : $(SRC)\ice_error.c $(SRC)\ice_error.h
	$(CC) $(CFLAGS) /c $(SRC)\ice_error.c /Fo$@
$(DEP)\bosskey.obj      : $(SRC)\bosskey.c $(SRC)\bosskey.h
	$(CC) $(CFLAGS) /c $(SRC)\bosskey.c /Fo$@
$(DEP)\new_process.obj  : $(SRC)\new_process.c $(SRC)\new_process.h
	$(CC) $(CFLAGS) /c $(SRC)\new_process.c /Fo$@
$(DEP)\cpu_avx.obj      : $(SRC)\cpu_avx.c $(SRC)\cpu_avx.h
	$(CC) $(CFLAGS) /arch:AVX /c $(SRC)\cpu_avx.c /Fo$@
$(DEP)\cpu_avx512.obj   : $(SRC)\cpu_avx512.c $(SRC)\cpu_avx512.h
	$(CC) $(CFLAGS) /arch:AVX512 /c $(SRC)\cpu_avx512.c /Fo$@
$(DEP)\cpu_info.obj     : $(SRC)\cpu_info.c $(SRC)\cpu_info.h
	$(CC) $(CFLAGS) /c $(SRC)\cpu_info.c /Fo$@
$(DEP)\balance.obj      : $(SRC)\balance.c $(SRC)\balance.h
	$(CC) $(CFLAGS) /c $(SRC)\balance.c /Fo$@
$(DEP)\win_registry.obj : $(SRC)\win_registry.c $(SRC)\win_registry.h
	$(CC) $(CFLAGS) /c $(SRC)\win_registry.c /Fo$@
$(DEP)\set_env.obj      : $(SRC)\set_env.c $(SRC)\set_env.h
	$(CC) $(CFLAGS) /c $(SRC)\set_env.c /Fo$@
$(DEP)\on_tabs.obj      : $(SRC)\on_tabs.c $(SRC)\on_tabs.h
	$(CC) $(CFLAGS) /c $(SRC)\on_tabs.c /Fo$@
$(DEP)\lz4.obj          : $(SRC)\lz4.c $(SRC)\lz4.h
	$(CC) $(CFLAGS) /c $(SRC)\lz4.c /Fo$@
$(DEP)\cjson.obj        : $(SRC)\cjson.c $(SRC)\cjson.h
	$(CC) $(CFLAGS) /c $(SRC)\cjson.c /Fo$@
$(DEP)\json_paser.obj   : $(SRC)\json_paser.c $(SRC)\json_paser.h
	$(CC) $(CFLAGS) /c $(SRC)\json_paser.c /Fo$@
$(DEP)\ini_parser.obj   : $(SRC)\ini_parser.c $(SRC)\ini_parser.h
	$(CC) $(CFLAGS) /c $(SRC)\ini_parser.c /Fo$@

!if "$(VC12_CRT)"=="" && "$(MSVC_CRT)"=="1"
$(DEP)\msvcrt-light-$(PLATFORM).lib : msrt\msvcrt-light-$(PLATFORM).def
!if "$(CC)"=="clang-cl"
	$(GEN_LIB) -D msvcrt.dll -d msrt\msvcrt-light-$(PLATFORM).def -l $(DEP)\msvcrt-light-$(PLATFORM).lib $(GEN_FLAGS)
!else
	$(GEN_LIB) /DEF:msrt\msvcrt-light-$(PLATFORM).def /OUT:$(DEP)\msvcrt-light-$(PLATFORM).lib \
	           /NOLOGO /NODEFAULTLIB /IGNORE:4102 /MACHINE:$(PLATFORM) /NAME:msvcrt.dll
!endif	
$(DEP)\ntdll-$(PLATFORM).lib        : msrt\ntdll-$(PLATFORM).def
!if "$(CC)"=="clang-cl"
	$(GEN_LIB) -D ntdll.dll -d msrt\ntdll-$(PLATFORM).def -l $(DEP)\ntdll-$(PLATFORM).lib $(GEN_FLAGS)
!else
	$(GEN_LIB) /DEF:msrt\ntdll-$(PLATFORM).def /OUT:$(DEP)\ntdll-$(PLATFORM).lib /NOLOGO \
	           /NODEFAULTLIB /IGNORE:4102 /MACHINE:$(PLATFORM) /NAME:ntdll.dll    
!endif
!endif

.PHONY		            : dirs
dirs:
    @if not exist "$(DISTDIR)" mkdir "$(DISTDIR)" && echo.   Created $(DISTDIR)
    @if not exist "$(DEP)" mkdir "$(DEP)" && echo.   Created $(DEP)

.PHONY		            : install
install                 : all
    @if not defined LIBPORTABLE_PATH @echo please defined LIBPORTABLE_PATH environment variable&exit 1
    @if not exist "%LIBPORTABLE_PATH%" mkdir "%LIBPORTABLE_PATH%"
    @if not exist "%LIBPORTABLE_PATH%\bin" mkdir "%LIBPORTABLE_PATH%\bin"
    @if not exist "%LIBPORTABLE_PATH%\lib" mkdir "%LIBPORTABLE_PATH%\lib"
    @if not exist "%LIBPORTABLE_PATH%\include" mkdir "%LIBPORTABLE_PATH%\include"
    -$(CP) $(SRC)\portable.h "%LIBPORTABLE_PATH%\include"
    -$(CP) $(DISTDIR)\portable$(BITS).lib "%LIBPORTABLE_PATH%\lib"
    -$(CP) $(OUT) "%LIBPORTABLE_PATH%\bin"
    -$(CP) $(SRC)\portable(example).ini "%LIBPORTABLE_PATH%\bin"

$(DEP)\resource.res     : $(SRC)\resource.rc
	$(RC) $(RCFLAGS)  /fo$@ $(SRC)\resource.rc

.PHONY		            : clean
clean                   : 
	-$(RMDIR) $(DISTDIR) $(DEP) 2>NUL 1>NUL
